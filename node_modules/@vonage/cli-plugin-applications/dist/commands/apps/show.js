"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const app_base_1 = tslib_1.__importDefault(require("../../app_base"));
const prompts_1 = require("prompts");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
class ApplicationsShow extends app_base_1.default {
    setQuestions(list) {
        return list.map((application) => {
            return {
                title: `${application.name} | ${application.id}`,
                value: application.id
            };
        });
    }
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const args = this.parsedArgs;
            let response = args;
            if (!args.appId) {
                let appData = yield this.allApplications;
                let appList = appData['_embedded'].applications;
                response = yield prompts_1.prompt([
                    {
                        type: 'autocomplete',
                        name: 'appId',
                        message: 'Your Applications',
                        choices: this.setQuestions(appList),
                        initial: 0,
                    }
                ]);
            }
            let output = yield this.getSingleApplication(response.appId);
            let indent = '  ';
            this.log(chalk_1.default.magenta.underline.bold("Application Name:"), output.name);
            this.log('');
            this.log(chalk_1.default.magenta.underline.bold("Application ID:"), output.id);
            this.log('');
            let { voice, messages, rtc, vbc } = output.capabilities;
            if (voice) {
                let { event_url, answer_url } = voice.webhooks;
                this.log(chalk_1.default.magenta.underline.bold("Voice Settings"));
                this.log(indent, chalk_1.default.cyan.underline.bold("Event Webhook:"));
                this.log(indent, indent, chalk_1.default.bold('Address:'), event_url.address);
                this.log(indent, indent, chalk_1.default.bold('HTTP Method:'), event_url.http_method);
                this.log(indent, chalk_1.default.cyan.underline.bold("Answer Webhook:"));
                this.log(indent, indent, chalk_1.default.bold('Address:'), answer_url.address);
                this.log(indent, indent, chalk_1.default.bold('HTTP Method:'), answer_url.http_method);
                this.log('');
            }
            if (messages) {
                let { inbound_url, status_url } = messages.webhooks;
                this.log(chalk_1.default.magenta.underline.bold("Messages Settings"));
                this.log(indent, chalk_1.default.cyan.underline.bold("Inbound Webhook:"));
                this.log(indent, indent, chalk_1.default.bold('Address:'), inbound_url.address);
                this.log(indent, indent, chalk_1.default.bold('HTTP Method:'), inbound_url.http_method);
                this.log(indent, chalk_1.default.cyan.underline.bold("Status Webhook:"));
                this.log(indent, indent, chalk_1.default.bold('Address:'), status_url.address);
                this.log(indent, indent, chalk_1.default.bold('HTTP Method:'), status_url.http_method);
                this.log('');
            }
            if (rtc) {
                let { event_url } = rtc.webhooks;
                this.log(chalk_1.default.magenta.underline.bold("RTC Settings"));
                this.log(indent, chalk_1.default.cyan.underline.bold("Event Webhook:"));
                this.log(indent, indent, chalk_1.default.bold('Address:'), event_url.address);
                this.log(indent, indent, chalk_1.default.bold('HTTP Method:'), event_url.http_method);
                this.log('');
            }
            if (vbc) {
                this.log(chalk_1.default.magenta.underline.bold("VBC Settings"));
                this.log(chalk_1.default.bold("Enabled"));
                this.log('');
            }
            this.log(chalk_1.default.magenta.underline.bold("Public Key"));
            this.log(output.keys.public_key);
            this.log('');
            this.exit();
        });
    }
    catch(error) {
        const _super = Object.create(null, {
            catch: { get: () => super.catch }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return _super.catch.call(this, error);
        });
    }
}
exports.default = ApplicationsShow;
ApplicationsShow.description = 'show Vonage application details';
ApplicationsShow.flags = Object.assign({}, app_base_1.default.flags);
ApplicationsShow.examples = [];
ApplicationsShow.args = [
    { name: 'appId', required: false },
];
