"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_utils_1 = tslib_1.__importDefault(require("@vonage/cli-utils"));
class AppCommand extends cli_utils_1.default {
    catch(error) {
        const _super = Object.create(null, {
            catch: { get: () => super.catch }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return _super.catch.call(this, error);
        });
    }
    get allApplications() {
        return new Promise((res, rej) => {
            this.vonage.applications.get({}, (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            }, true);
        });
    }
    createApplication(data) {
        return new Promise((res, rej) => {
            this.vonage.applications.create(data, (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            });
        });
    }
    getSingleApplication(appId) {
        return new Promise((res, rej) => {
            this.vonage.applications.get(appId, (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            }, true);
        });
    }
    updateApplication(appObj) {
        return new Promise((res, rej) => {
            this.vonage.applications.update(appObj.id, appObj, (error, result) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(result);
                }
            });
        });
    }
    deleteApplication(appId) {
        return new Promise((res, rej) => {
            this.vonage.applications.delete(appId, (error, result) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(result);
                }
            });
        });
    }
    updateNumber(number, countryCode, appId) {
        return new Promise((res, rej) => {
            this.vonage.number.update(countryCode, number, {
                app_id: appId || null,
            }, (error, result) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(result);
                }
            });
        });
    }
    listNumbers(number) {
        return new Promise((res, rej) => {
            this.vonage.number.get({
                pattern: number || '',
                search_pattern: 1
            }, (error, result) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(result);
                }
            });
        });
    }
}
exports.default = AppCommand;
AppCommand.flags = Object.assign({}, cli_utils_1.default.flags);
