"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const fs_2 = require("fs");
const path = __importStar(require("path"));
const shelljs_1 = __importDefault(require("shelljs"));
async function isExists(path) {
    try {
        let result = await fs_1.promises.access(path, fs_2.constants.F_OK);
        return true;
    }
    catch (error) {
        return false;
    }
}
;
async function writeFile(filePath, data) {
    try {
        const dirname = path.dirname(filePath);
        let exist = await isExists(dirname);
        if (!exist) {
            await shelljs_1.default.mkdir('-p', dirname);
        }
        exist = await isExists(filePath);
        if (!exist) {
            (0, fs_2.writeFileSync)(filePath, JSON.stringify({ apiKey: '', apiSecret: '' }, null, 2), 'utf8');
        }
    }
    catch (err) {
        throw new Error(err);
    }
}
const hook = async function (options) {
    let name = path.join(this.config.configDir, 'vonage.config.json');
    writeFile(name, '');
    return;
};
exports.default = hook;
