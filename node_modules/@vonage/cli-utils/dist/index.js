"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const server_sdk_1 = tslib_1.__importDefault(require("@vonage/server-sdk"));
const fs_1 = require("fs");
const path = tslib_1.__importStar(require("path"));
// interface IClaims {
//     application_id: string
//     iat?: number,
//     jti?: string,
//     sub?: string,
//     exp?: string,
//     acl?: {
//         paths?: {
//             "/*/users/**"?: any,
//             "/*/conversations/**"?: any,
//             "/*/sessions/**"?: any,
//             "/*/devices/**"?: any,
//             "/*/image/**"?: any,
//             "/*/media/**"?: any,
//             "/*/applications/**"?: any,
//             "/*/push/**"?: any,
//             "/*/knocking/**"?: any,
//             "/*/legs/**"?: any
//         }
//     },
// }
class BaseCommand extends command_1.Command {
    get vonage() {
        if (this._vonage)
            return this._vonage;
        let credentials = {
            apiKey: this._apiKey || '',
            apiSecret: this._apiSecret || ''
        };
        this._vonage = new server_sdk_1.default(credentials, { appendToUserAgent: "vonage-cli" });
        return this._vonage;
    }
    get userConfig() {
        return this._userConfig;
    }
    saveConfig(newConfig) {
        fs_1.writeFileSync(path.join(this.config.configDir, 'vonage.config.json'), JSON.stringify(newConfig));
        return;
    }
    displayBalance() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((res, rej) => {
                this.vonage.account.checkBalance((error, response) => {
                    if (error) {
                        rej(error);
                    }
                    else {
                        res(response);
                    }
                });
            });
        });
    }
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // const { args, flags } = this.parse(this.constructor as Input<typeof BaseCommand.flags>);
            const { args, flags } = this.parse(this.constructor);
            this.globalFlags = { apiKey: flags.apiKey, apiSecret: flags.apiSecret, appId: flags.appId, keyFile: flags.keyFile, trace: flags.trace };
            this.parsedFlags = flags;
            this.parsedArgs = args;
            this.Vonage = server_sdk_1.default;
            //this removes the global flags from the command, so checking for interactive mode is possible.
            delete this.parsedFlags.apiKey;
            delete this.parsedFlags.apiSecret;
            delete this.parsedFlags.trace;
            try {
                let rawConfig = fs_1.readFileSync(path.join(this.config.configDir, 'vonage.config.json'));
                this._userConfig = JSON.parse(rawConfig.toString());
            }
            catch (error) {
                // need something when no file exists - do we auto create? ask?
            }
            let apiKey, apiSecret, appId, keyFile;
            // creds priority order -- flags > env > config
            // todo - need a better interface for this
            if ((flags === null || flags === void 0 ? void 0 : flags.apiKey) && (flags === null || flags === void 0 ? void 0 : flags.apiSecret)) {
                apiKey = flags.apiKey;
                apiSecret = flags.apiSecret;
            }
            else if (process.env.VONAGE_API_KEY && process.env.VONAGE_API_SECRET) {
                apiKey = process.env.VONAGE_API_KEY;
                apiSecret = process.env.VONAGE_API_SECRET;
            }
            else {
                apiKey = this._userConfig.apiKey;
                apiSecret = this._userConfig.apiSecret;
            }
            if ((flags === null || flags === void 0 ? void 0 : flags.appId) && (flags === null || flags === void 0 ? void 0 : flags.keyFile)) {
                appId = flags.appId;
                keyFile = flags.keyFile;
            }
            this._apiKey = apiKey;
            this._apiSecret = apiSecret;
            this._appId = appId;
            this._keyFile = keyFile;
        });
    }
    catch(error) {
        const _super = Object.create(null, {
            catch: { get: () => super.catch }
        });
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (((_a = error.oclif) === null || _a === void 0 ? void 0 : _a.exit) === 0)
                return;
            if ((_b = this.globalFlags) === null || _b === void 0 ? void 0 : _b.trace)
                this.log(error.stack);
            if (error.statusCode === 401) {
                this.error('Authentication Failure', {
                    code: 'API_AUTH_ERR',
                    suggestions: [
                        "Verify your Api Key and Api Secret with 'vonage config'.",
                    ]
                });
            }
            if (error.statusCode === 420 && error.body['error-code-label'] === 'method failed') {
                this.error('Method Failed', {
                    code: 'API_MTHD_ERR',
                    suggestions: [
                        'Check your inputs are correct.',
                    ]
                });
            }
            return _super.catch.call(this, error);
        });
    }
    finally(error) {
        const _super = Object.create(null, {
            finally: { get: () => super.finally }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return _super.finally.call(this, error);
        });
    }
}
exports.default = BaseCommand;
// add global flags here
BaseCommand.flags = {
    help: command_1.flags.help({ char: 'h' }),
    apiKey: command_1.flags.string({ hidden: true, dependsOn: ['apiSecret'] }),
    apiSecret: command_1.flags.string({ hidden: true, dependsOn: ['apiKey'] }),
    appId: command_1.flags.string({ hidden: true, dependsOn: ['keyFile'] }),
    keyFile: command_1.flags.string({ hidden: true, dependsOn: ['appId'] }),
    trace: command_1.flags.boolean({ hidden: true })
};
