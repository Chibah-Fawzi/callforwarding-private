"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_utils_1 = tslib_1.__importDefault(require("@vonage/cli-utils"));
class NumberCommand extends cli_utils_1.default {
    catch(error) {
        const _super = Object.create(null, {
            catch: { get: () => super.catch }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return _super.catch.call(this, error);
        });
    }
    _parseParams(params) {
        let searchResponse = {};
        if (params.startsWith) {
            searchResponse['pattern'] = params.startsWith;
            searchResponse['search_pattern'] = 0;
            delete params.startsWith;
        }
        if (params.endsWith) {
            searchResponse['pattern'] = params.endsWith;
            searchResponse['search_pattern'] = 2;
            delete params.endsWith;
        }
        if (params.contains) {
            searchResponse['pattern'] = params.contains;
            searchResponse['search_pattern'] = 1;
            delete params.contains;
        }
        return Object.assign({}, params, searchResponse);
    }
    getAllNumbers(params) {
        return new Promise((res, rej) => {
            this.vonage.number.get(params, (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            }, true);
        });
    }
    numberBuy(params) {
        let { countryCode, number } = params;
        return new Promise((res, rej) => {
            this.vonage.number.buy(countryCode, number, (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            });
        });
    }
    numberSearch(countryCode, options) {
        return new Promise((res, rej) => {
            this.vonage.number.search(countryCode, this._parseParams(options), (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            });
        });
    }
    numberUpdate(number, countryCode, options) {
        return new Promise((res, rej) => {
            this.vonage.number.update(countryCode, number, options, (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            });
        });
    }
    numberCancel(params) {
        let { countryCode, number } = params;
        return new Promise((res, rej) => {
            this.vonage.number.cancel(countryCode, number, (error, response) => {
                if (error) {
                    rej(error);
                }
                else {
                    res(response);
                }
            });
        });
    }
}
exports.default = NumberCommand;
NumberCommand.flags = Object.assign({}, cli_utils_1.default.flags);
