"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const number_base_1 = tslib_1.__importDefault(require("../../number_base"));
const command_1 = require("@oclif/command");
const cli_ux_1 = tslib_1.__importDefault(require("cli-ux"));
class NumberSearch extends number_base_1.default {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const flags = this.parsedFlags;
            const args = this.parsedArgs;
            let numberData = yield this.numberSearch(args.countryCode, flags);
            cli_ux_1.default.table(numberData.numbers, {
                country: {},
                msisdn: {
                    header: "Number"
                },
                type: {},
                cost: {},
                features: {
                    get: (row) => row.features.join(',')
                }
            }, Object.assign({}, flags));
        });
    }
    catch(error) {
        const _super = Object.create(null, {
            catch: { get: () => super.catch }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            console.log(error);
            return _super.catch.call(this, error);
        });
    }
}
exports.default = NumberSearch;
NumberSearch.description = 'search for available Vonage numbers';
NumberSearch.examples = [
    `vonage numbers:search US`,
    `vonage numbers:search US --startsWith=1555`,
    `vonage numbers:search US --features=VOICE,SMS --endsWith=1234`
];
NumberSearch.flags = Object.assign(Object.assign({}, number_base_1.default.flags), { 'type': command_1.flags.string({
        description: 'Filter by type of number, such as mobile or landline',
        options: ['landline', 'mobile-lvn', 'landline-toll-free']
    }), 'startsWith': command_1.flags.string({
        description: 'Filter from the start of the phone number.',
        exclusive: ['endsWith', 'contains']
    }), 'endsWith': command_1.flags.string({
        description: 'Filter from the end of the phone number.',
        exclusive: ['startsWith', 'contains']
    }), 'contains': command_1.flags.string({
        description: 'Filter from anywhere in the phone number.',
        exclusive: ['endsWith', 'startsWith']
    }), 'features': command_1.flags.string({
        description: 'Available features are SMS, VOICE and MMS. To look for numbers that support multiple features, use a comma-separated value: SMS,MMS,VOICE.',
        options: ['SMS', 'VOICE', 'SMS,VOICE', 'MMS', 'SMS,MMS', 'VOICE,MMS', 'SMS,MMS,VOICE']
    }) });
NumberSearch.args = [
    { name: 'countryCode', required: false }
];
