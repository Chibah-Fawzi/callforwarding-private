"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_utils_1 = tslib_1.__importDefault(require("@vonage/cli-utils"));
const jwt_1 = require("@vonage/jwt");
const vetch_1 = require("@vonage/vetch");
const fs_1 = require("fs");
const lodash_1 = require("lodash");
const types_1 = require("./types");
class UsersCommand extends cli_utils_1.default {
    constructor() {
        super(...arguments);
        this._baseurl = `https://api.nexmo.com/v0.3/users`;
        this._defaultHttpOptions = {
            "method": types_1.HTTPMethods.GET,
            "headers": {},
            'responseType': types_1.ResponseTypes.json
        };
    }
    _generateJWT() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let app_details_raw = fs_1.readFileSync(`${process.cwd()}/vonage_app.json`);
            let app_details = (JSON.parse(app_details_raw.toString()));
            this._token = yield jwt_1.tokenGenerate(app_details.application_id, app_details.private_key);
            return;
        });
    }
    catch(error) {
        const _super = Object.create(null, {
            catch: { get: () => super.catch }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return _super.catch.call(this, error);
        });
    }
    init() {
        const _super = Object.create(null, {
            init: { get: () => super.init }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield _super.init.call(this);
            yield this._generateJWT();
            return;
        });
    }
    getAllUsers(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const opts = lodash_1.merge({}, this._defaultHttpOptions);
            opts['url'] = `${this._baseurl}`;
            opts['headers']['Authorization'] = `Bearer ${this._token}`;
            let response = yield vetch_1.request(opts);
            return response;
        });
    }
    getUserById(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const opts = lodash_1.merge({}, this._defaultHttpOptions);
            opts['url'] = `${this._baseurl}/${id}`;
            opts['headers']['Authorization'] = `Bearer ${this._token}`;
            let response = yield vetch_1.request(opts);
            return response;
        });
    }
    createUser(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const opts = lodash_1.merge({}, this._defaultHttpOptions);
            opts['url'] = `${this._baseurl}`;
            opts['method'] = types_1.HTTPMethods.POST;
            opts['data'] = params;
            opts['headers']['Authorization'] = `Bearer ${this._token}`;
            let response = yield vetch_1.request(opts);
            return response;
        });
    }
    updateUser(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const opts = lodash_1.merge({}, this._defaultHttpOptions);
            opts['url'] = `${this._baseurl}/${params.userID}`;
            opts['method'] = types_1.HTTPMethods.PATCH;
            opts['data'] = params;
            opts['headers']['Authorization'] = `Bearer ${this._token}`;
            let response = yield vetch_1.request(opts);
            return response;
        });
    }
    deleteUser(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const opts = lodash_1.merge({}, this._defaultHttpOptions);
            opts['url'] = `${this._baseurl}/${id}`;
            opts['method'] = types_1.HTTPMethods.DELETE;
            opts['headers']['Authorization'] = `Bearer ${this._token}`;
            let response = yield vetch_1.request(opts);
            return response;
        });
    }
}
exports.default = UsersCommand;
UsersCommand.flags = Object.assign({}, cli_utils_1.default.flags);
